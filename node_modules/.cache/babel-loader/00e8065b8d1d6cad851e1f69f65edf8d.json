{"ast":null,"code":"import { unstable_useForkRef as useForkRef } from '@mui/utils';\nimport { appendOwnerState, resolveComponentProps, mergeSlotProps } from '@mui/base/utils';\nimport { useColorInversion } from '../styles/ColorInversion';\n/**\n * An internal function to create a Joy UI slot.\n *\n * This is an advanced version of Base UI `useSlotProps` because Joy UI allows leaf component to be customized via `component` prop\n * while Base UI does not need to support leaf component customization.\n *\n * @param {string} name: name of the slot\n * @param {object} parameters\n * @returns {[Slot, slotProps]} The slot's React component and the slot's props\n *\n * Note: the returned slot's props\n * - will never contain `component` prop.\n * - might contain `as` prop.\n */\nexport default function useSlot(\n/**\n * The slot's name. All Joy UI components should have `root` slot.\n *\n * If the name is `root`, the logic behaves differently from other slots,\n * e.g. the `externalForwardedProps` are spread to `root` slot but not other slots.\n */\nname, parameters) {\n  const {\n    className,\n    elementType: initialElementType,\n    ownerState,\n    externalForwardedProps,\n    getSlotOwnerState,\n    internalForwardedProps,\n    ...useSlotPropsParams\n  } = parameters;\n  const {\n    component: rootComponent,\n    slots = {\n      [name]: undefined\n    },\n    slotProps = {\n      [name]: undefined\n    },\n    ...other\n  } = externalForwardedProps;\n  const elementType = slots[name] || initialElementType;\n\n  // `slotProps[name]` can be a callback that receives the component's ownerState.\n  // `resolvedComponentsProps` is always a plain object.\n  const resolvedComponentsProps = resolveComponentProps(slotProps[name], ownerState);\n  const {\n    props: {\n      component: slotComponent,\n      ...mergedProps\n    },\n    internalRef\n  } = mergeSlotProps({\n    className,\n    ...useSlotPropsParams,\n    externalForwardedProps: name === 'root' ? other : undefined,\n    externalSlotProps: resolvedComponentsProps\n  });\n  const ref = useForkRef(internalRef, resolvedComponentsProps == null ? void 0 : resolvedComponentsProps.ref, parameters.ref);\n\n  // @ts-ignore internal logic\n  const {\n    disableColorInversion = false,\n    ...slotOwnerState\n  } = getSlotOwnerState ? getSlotOwnerState(mergedProps) : {};\n  const finalOwnerState = {\n    ...ownerState,\n    ...slotOwnerState\n  };\n  const {\n    getColor\n  } = useColorInversion(finalOwnerState.variant);\n  if (name === 'root') {\n    var _color;\n    // for the root slot, color inversion is calculated before the `useSlot` and pass through `ownerState`.\n    finalOwnerState.color = (_color = mergedProps.color) != null ? _color : ownerState.color;\n  } else if (!disableColorInversion) {\n    finalOwnerState.color = getColor(mergedProps.color, finalOwnerState.color);\n  }\n  const LeafComponent = name === 'root' ? slotComponent || rootComponent : slotComponent;\n  const props = appendOwnerState(elementType, {\n    ...(name === 'root' && !rootComponent && !slots[name] && internalForwardedProps),\n    ...(name !== 'root' && !slots[name] && internalForwardedProps),\n    ...mergedProps,\n    ...(LeafComponent && {\n      as: LeafComponent\n    }),\n    ref\n  }, finalOwnerState);\n  Object.keys(slotOwnerState).forEach(propName => {\n    delete props[propName];\n  });\n  return [elementType, props];\n}","map":{"version":3,"names":["unstable_useForkRef","useForkRef","appendOwnerState","resolveComponentProps","mergeSlotProps","useColorInversion","useSlot","name","parameters","className","elementType","initialElementType","ownerState","externalForwardedProps","getSlotOwnerState","internalForwardedProps","useSlotPropsParams","component","rootComponent","slots","undefined","slotProps","other","resolvedComponentsProps","props","slotComponent","mergedProps","internalRef","externalSlotProps","ref","disableColorInversion","slotOwnerState","finalOwnerState","getColor","variant","_color","color","LeafComponent","as","Object","keys","forEach","propName"],"sources":["/Users/nazardosmukhambetov/Desktop/MAIN-PROJECT-GIGAGRAM-main/node_modules/@mui/joy/utils/useSlot.js"],"sourcesContent":["import { unstable_useForkRef as useForkRef } from '@mui/utils';\nimport { appendOwnerState, resolveComponentProps, mergeSlotProps } from '@mui/base/utils';\nimport { useColorInversion } from '../styles/ColorInversion';\n/**\n * An internal function to create a Joy UI slot.\n *\n * This is an advanced version of Base UI `useSlotProps` because Joy UI allows leaf component to be customized via `component` prop\n * while Base UI does not need to support leaf component customization.\n *\n * @param {string} name: name of the slot\n * @param {object} parameters\n * @returns {[Slot, slotProps]} The slot's React component and the slot's props\n *\n * Note: the returned slot's props\n * - will never contain `component` prop.\n * - might contain `as` prop.\n */\nexport default function useSlot(\n/**\n * The slot's name. All Joy UI components should have `root` slot.\n *\n * If the name is `root`, the logic behaves differently from other slots,\n * e.g. the `externalForwardedProps` are spread to `root` slot but not other slots.\n */\nname, parameters) {\n  const {\n    className,\n    elementType: initialElementType,\n    ownerState,\n    externalForwardedProps,\n    getSlotOwnerState,\n    internalForwardedProps,\n    ...useSlotPropsParams\n  } = parameters;\n  const {\n    component: rootComponent,\n    slots = {\n      [name]: undefined\n    },\n    slotProps = {\n      [name]: undefined\n    },\n    ...other\n  } = externalForwardedProps;\n  const elementType = slots[name] || initialElementType;\n\n  // `slotProps[name]` can be a callback that receives the component's ownerState.\n  // `resolvedComponentsProps` is always a plain object.\n  const resolvedComponentsProps = resolveComponentProps(slotProps[name], ownerState);\n  const {\n    props: {\n      component: slotComponent,\n      ...mergedProps\n    },\n    internalRef\n  } = mergeSlotProps({\n    className,\n    ...useSlotPropsParams,\n    externalForwardedProps: name === 'root' ? other : undefined,\n    externalSlotProps: resolvedComponentsProps\n  });\n  const ref = useForkRef(internalRef, resolvedComponentsProps == null ? void 0 : resolvedComponentsProps.ref, parameters.ref);\n\n  // @ts-ignore internal logic\n  const {\n    disableColorInversion = false,\n    ...slotOwnerState\n  } = getSlotOwnerState ? getSlotOwnerState(mergedProps) : {};\n  const finalOwnerState = {\n    ...ownerState,\n    ...slotOwnerState\n  };\n  const {\n    getColor\n  } = useColorInversion(finalOwnerState.variant);\n  if (name === 'root') {\n    var _color;\n    // for the root slot, color inversion is calculated before the `useSlot` and pass through `ownerState`.\n    finalOwnerState.color = (_color = mergedProps.color) != null ? _color : ownerState.color;\n  } else if (!disableColorInversion) {\n    finalOwnerState.color = getColor(mergedProps.color, finalOwnerState.color);\n  }\n  const LeafComponent = name === 'root' ? slotComponent || rootComponent : slotComponent;\n  const props = appendOwnerState(elementType, {\n    ...(name === 'root' && !rootComponent && !slots[name] && internalForwardedProps),\n    ...(name !== 'root' && !slots[name] && internalForwardedProps),\n    ...mergedProps,\n    ...(LeafComponent && {\n      as: LeafComponent\n    }),\n    ref\n  }, finalOwnerState);\n  Object.keys(slotOwnerState).forEach(propName => {\n    delete props[propName];\n  });\n  return [elementType, props];\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}