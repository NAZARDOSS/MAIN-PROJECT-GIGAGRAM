{"ast":null,"code":"import _defineProperty from \"/Users/nazardosmukhambetov/Desktop/MAIN-PROJECT-GIGAGRAM-main/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"className\", \"elementType\", \"ownerState\", \"externalForwardedProps\", \"getSlotOwnerState\", \"internalForwardedProps\"],\n  _excluded2 = [\"component\", \"slots\", \"slotProps\"],\n  _excluded3 = [\"component\"],\n  _excluded4 = [\"disableColorInversion\"];\nimport { unstable_useForkRef as useForkRef } from '@mui/utils';\nimport { appendOwnerState, resolveComponentProps, mergeSlotProps } from '@mui/base/utils';\nimport { useColorInversion } from '../styles/ColorInversion';\n/**\n * An internal function to create a Joy UI slot.\n *\n * This is an advanced version of Base UI `useSlotProps` because Joy UI allows leaf component to be customized via `component` prop\n * while Base UI does not need to support leaf component customization.\n *\n * @param {string} name: name of the slot\n * @param {object} parameters\n * @returns {[Slot, slotProps]} The slot's React component and the slot's props\n *\n * Note: the returned slot's props\n * - will never contain `component` prop.\n * - might contain `as` prop.\n */\nexport default function useSlot(\n/**\n * The slot's name. All Joy UI components should have `root` slot.\n *\n * If the name is `root`, the logic behaves differently from other slots,\n * e.g. the `externalForwardedProps` are spread to `root` slot but not other slots.\n */\nname, parameters) {\n  var className = parameters.className,\n    initialElementType = parameters.elementType,\n    ownerState = parameters.ownerState,\n    externalForwardedProps = parameters.externalForwardedProps,\n    getSlotOwnerState = parameters.getSlotOwnerState,\n    internalForwardedProps = parameters.internalForwardedProps,\n    useSlotPropsParams = _objectWithoutPropertiesLoose(parameters, _excluded);\n  var rootComponent = externalForwardedProps.component,\n    _externalForwardedPro = externalForwardedProps.slots,\n    slots = _externalForwardedPro === void 0 ? _defineProperty({}, name, undefined) : _externalForwardedPro,\n    _externalForwardedPro2 = externalForwardedProps.slotProps,\n    slotProps = _externalForwardedPro2 === void 0 ? _defineProperty({}, name, undefined) : _externalForwardedPro2,\n    other = _objectWithoutPropertiesLoose(externalForwardedProps, _excluded2);\n  var elementType = slots[name] || initialElementType;\n\n  // `slotProps[name]` can be a callback that receives the component's ownerState.\n  // `resolvedComponentsProps` is always a plain object.\n  var resolvedComponentsProps = resolveComponentProps(slotProps[name], ownerState);\n  var _mergeSlotProps = mergeSlotProps(_extends({\n      className: className\n    }, useSlotPropsParams, {\n      externalForwardedProps: name === 'root' ? other : undefined,\n      externalSlotProps: resolvedComponentsProps\n    })),\n    slotComponent = _mergeSlotProps.props.component,\n    internalRef = _mergeSlotProps.internalRef,\n    mergedProps = _objectWithoutPropertiesLoose(_mergeSlotProps.props, _excluded3);\n  var ref = useForkRef(internalRef, resolvedComponentsProps == null ? void 0 : resolvedComponentsProps.ref, parameters.ref);\n\n  // @ts-ignore internal logic\n  var _ref = getSlotOwnerState ? getSlotOwnerState(mergedProps) : {},\n    _ref$disableColorInve = _ref.disableColorInversion,\n    disableColorInversion = _ref$disableColorInve === void 0 ? false : _ref$disableColorInve,\n    slotOwnerState = _objectWithoutPropertiesLoose(_ref, _excluded4);\n  var finalOwnerState = _extends({}, ownerState, slotOwnerState);\n  var _useColorInversion = useColorInversion(finalOwnerState.variant),\n    getColor = _useColorInversion.getColor;\n  if (name === 'root') {\n    var _color;\n    // for the root slot, color inversion is calculated before the `useSlot` and pass through `ownerState`.\n    finalOwnerState.color = (_color = mergedProps.color) != null ? _color : ownerState.color;\n  } else if (!disableColorInversion) {\n    finalOwnerState.color = getColor(mergedProps.color, finalOwnerState.color);\n  }\n  var LeafComponent = name === 'root' ? slotComponent || rootComponent : slotComponent;\n  var props = appendOwnerState(elementType, _extends({}, name === 'root' && !rootComponent && !slots[name] && internalForwardedProps, name !== 'root' && !slots[name] && internalForwardedProps, mergedProps, LeafComponent && {\n    as: LeafComponent\n  }, {\n    ref: ref\n  }), finalOwnerState);\n  Object.keys(slotOwnerState).forEach(function (propName) {\n    delete props[propName];\n  });\n  return [elementType, props];\n}","map":{"version":3,"names":["_extends","_objectWithoutPropertiesLoose","_excluded","_excluded2","_excluded3","_excluded4","unstable_useForkRef","useForkRef","appendOwnerState","resolveComponentProps","mergeSlotProps","useColorInversion","useSlot","name","parameters","className","initialElementType","elementType","ownerState","externalForwardedProps","getSlotOwnerState","internalForwardedProps","useSlotPropsParams","rootComponent","component","_externalForwardedPro","slots","_defineProperty","undefined","_externalForwardedPro2","slotProps","other","resolvedComponentsProps","_mergeSlotProps","externalSlotProps","slotComponent","props","internalRef","mergedProps","ref","_ref","_ref$disableColorInve","disableColorInversion","slotOwnerState","finalOwnerState","_useColorInversion","variant","getColor","_color","color","LeafComponent","as","Object","keys","forEach","propName"],"sources":["/Users/nazardosmukhambetov/Desktop/MAIN-PROJECT-GIGAGRAM-main/node_modules/@mui/joy/utils/useSlot.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"className\", \"elementType\", \"ownerState\", \"externalForwardedProps\", \"getSlotOwnerState\", \"internalForwardedProps\"],\n  _excluded2 = [\"component\", \"slots\", \"slotProps\"],\n  _excluded3 = [\"component\"],\n  _excluded4 = [\"disableColorInversion\"];\nimport { unstable_useForkRef as useForkRef } from '@mui/utils';\nimport { appendOwnerState, resolveComponentProps, mergeSlotProps } from '@mui/base/utils';\nimport { useColorInversion } from '../styles/ColorInversion';\n/**\n * An internal function to create a Joy UI slot.\n *\n * This is an advanced version of Base UI `useSlotProps` because Joy UI allows leaf component to be customized via `component` prop\n * while Base UI does not need to support leaf component customization.\n *\n * @param {string} name: name of the slot\n * @param {object} parameters\n * @returns {[Slot, slotProps]} The slot's React component and the slot's props\n *\n * Note: the returned slot's props\n * - will never contain `component` prop.\n * - might contain `as` prop.\n */\nexport default function useSlot(\n/**\n * The slot's name. All Joy UI components should have `root` slot.\n *\n * If the name is `root`, the logic behaves differently from other slots,\n * e.g. the `externalForwardedProps` are spread to `root` slot but not other slots.\n */\nname, parameters) {\n  const {\n      className,\n      elementType: initialElementType,\n      ownerState,\n      externalForwardedProps,\n      getSlotOwnerState,\n      internalForwardedProps\n    } = parameters,\n    useSlotPropsParams = _objectWithoutPropertiesLoose(parameters, _excluded);\n  const {\n      component: rootComponent,\n      slots = {\n        [name]: undefined\n      },\n      slotProps = {\n        [name]: undefined\n      }\n    } = externalForwardedProps,\n    other = _objectWithoutPropertiesLoose(externalForwardedProps, _excluded2);\n  const elementType = slots[name] || initialElementType;\n\n  // `slotProps[name]` can be a callback that receives the component's ownerState.\n  // `resolvedComponentsProps` is always a plain object.\n  const resolvedComponentsProps = resolveComponentProps(slotProps[name], ownerState);\n  const _mergeSlotProps = mergeSlotProps(_extends({\n      className\n    }, useSlotPropsParams, {\n      externalForwardedProps: name === 'root' ? other : undefined,\n      externalSlotProps: resolvedComponentsProps\n    })),\n    {\n      props: {\n        component: slotComponent\n      },\n      internalRef\n    } = _mergeSlotProps,\n    mergedProps = _objectWithoutPropertiesLoose(_mergeSlotProps.props, _excluded3);\n  const ref = useForkRef(internalRef, resolvedComponentsProps == null ? void 0 : resolvedComponentsProps.ref, parameters.ref);\n\n  // @ts-ignore internal logic\n  const _ref = getSlotOwnerState ? getSlotOwnerState(mergedProps) : {},\n    {\n      disableColorInversion = false\n    } = _ref,\n    slotOwnerState = _objectWithoutPropertiesLoose(_ref, _excluded4);\n  const finalOwnerState = _extends({}, ownerState, slotOwnerState);\n  const {\n    getColor\n  } = useColorInversion(finalOwnerState.variant);\n  if (name === 'root') {\n    var _color;\n    // for the root slot, color inversion is calculated before the `useSlot` and pass through `ownerState`.\n    finalOwnerState.color = (_color = mergedProps.color) != null ? _color : ownerState.color;\n  } else if (!disableColorInversion) {\n    finalOwnerState.color = getColor(mergedProps.color, finalOwnerState.color);\n  }\n  const LeafComponent = name === 'root' ? slotComponent || rootComponent : slotComponent;\n  const props = appendOwnerState(elementType, _extends({}, name === 'root' && !rootComponent && !slots[name] && internalForwardedProps, name !== 'root' && !slots[name] && internalForwardedProps, mergedProps, LeafComponent && {\n    as: LeafComponent\n  }, {\n    ref\n  }), finalOwnerState);\n  Object.keys(slotOwnerState).forEach(propName => {\n    delete props[propName];\n  });\n  return [elementType, props];\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}